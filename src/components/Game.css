.particles-container {
  position: fixed;
  inset: 0;
  width: 100vw;
  height: 100vh;
  height: 100dvh;
  z-index: 0;
  pointer-events: none;
  overflow: hidden;
  background: var(--background-gradient, linear-gradient(180deg, 
    rgba(13, 13, 26, 0.95) 0%,
    rgba(13, 13, 26, 0.98) 100%
  ));
}

.particles-container canvas {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
}

@keyframes rotateGrid {
  0% {
    transform: rotate(0deg);
  }
  5% {
    transform: rotate(10deg);
  }
  15% {
    transform: rotate(170deg);
  }
  20% {
    transform: rotate(190deg);
  }
  25% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(180deg);
  }
}

@keyframes warningFlash {
  0% {
    box-shadow: 0 0 30px rgba(255, 233, 0, 0.2);
    transform: scale(1);
  }
  50% {
    box-shadow: 0 0 50px rgba(255, 233, 0, 0.6);
    transform: scale(1.02);
  }
  100% {
    box-shadow: 0 0 30px rgba(255, 233, 0, 0.2);
    transform: scale(1);
  }
}

@keyframes warningText {
  0% {
    opacity: 0;
    transform: translate(-50%, calc(-50% - 20px));
  }
  20% {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
  80% {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, calc(-50% + 20px));
  }
}

.game-container {
  position: fixed;
  inset: 0;
  width: 100vw;
  height: 100vh;
  height: 100dvh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  z-index: 1;
  background: transparent;
}

.game-container::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 150%;
  height: 150%;
  transform: translate(-50%, -50%);
  background: radial-gradient(circle, rgba(0, 255, 159, 0.1) 0%, transparent 70%);
  pointer-events: none;
  animation: ambientGlow 8s ease-in-out infinite;
}

/* Remove ::after since we're using Particles component */
.game-container::after {
  display: none;
}

@keyframes ambientGlow {
  0%, 100% { opacity: 0.5; }
  50% { opacity: 0.8; }
}

.game-header {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  z-index: 10;
  pointer-events: none;
}

.game-hud {
  position: absolute;
  top: min(30px, 4vh);
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  gap: min(300px, 25vw);
  pointer-events: none;
  z-index: 5;
  font-size: min(32px, 3vw);
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 2px;
}

.timer.safe {
  color: #00FF9F;
}

.timer.warning {
  color: #FFE900;
}

.timer.danger {
  color: #FF1177;
}

.board-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: auto;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: min(20px, 2vh);
  margin: 0;
  padding: 0;
  overflow: visible;
}

.game-board {
  --scale: min(
    1,
    min(
      calc((100vw - 10px) / 400),
      calc((100vh - 140px) / 400)
    )
  );
  position: relative;
  width: min(90vw, calc(100vh - 160px));
  height: min(90vw, calc(100vh - 160px));
  margin: 0;
  transform-style: preserve-3d;
  will-change: transform;
  display: flex;
  justify-content: center;  
  align-items: center;
  max-width: calc(100vh - 160px);
  max-height: calc(100vh - 160px);
}

/* Update canvas to match hex puzzle's canvas */
.game-board canvas {
  position: absolute;
  width: 100% !important;
  height: 100% !important;
  object-fit: contain;
  transform-origin: center;
  transform: scale(var(--scale));
}


.grid-full {
  animation: gridClear 1.2s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  z-index: 1;
}

.grid-full::before {
  content: '';
  position: absolute;
  inset: -20px;
  background: radial-gradient(
    circle at center,
    rgba(0, 255, 159, 0.6) 0%,
    rgba(0, 255, 159, 0.3) 30%,
    transparent 70%
  );
  pointer-events: none;
  z-index: 0;
  animation: gridClearOverlay 1.2s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes gridClearOverlay {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  20% {
    opacity: 1;
    transform: scale(1.1);
  }
  40% {
    opacity: 0.8;
    transform: scale(1.05);
  }
  100% {
    opacity: 0;
    transform: scale(1);
  }
}

/* Add a flash effect */
.grid-full::after {
  content: '';
  position: absolute;
  inset: 0;
  background: rgba(0, 255, 159, 0.3);
  z-index: 2;
  pointer-events: none;
  animation: gridClearFlash 1.2s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes gridClearFlash {
  0%, 100% { opacity: 0; }
  10%, 30% { opacity: 0.8; }
  50% { opacity: 0.4; }
  70% { opacity: 0.2; }
}

/* Update rotation hint text */
.rotation-hint {
  color: #00FF9F;
  font-size: 16px;
  text-transform: uppercase;
  letter-spacing: 1px;
  margin-bottom: 20px;
  text-align: center;
}

/* Update warning flash animation */
.rotation-warning {
  animation: pulse 0.4s ease-in-out 3;
  will-change: transform;
  /* Prevent animation from affecting child elements */
  transform-style: preserve-3d;
}

.rotation-text {
  position: absolute;
  top: 15%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #FFE900;
  font-size: min(32px, 4vw);
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: min(3px, 0.3vw);
  text-shadow: 
    0 0 min(15px, 1.5vw) #FFE900,
    0 0 min(25px, 2.5vw) #FFE900;
  pointer-events: none;
  z-index: 1000;
  padding: min(15px, 1.5vh) min(30px, 3vw);
  background: rgba(0, 0, 0, 0.3);
  border-radius: min(10px, 1vw);
  backdrop-filter: blur(5px);
  animation: warningText 1.4s ease-in-out forwards;
  white-space: nowrap;
}

/* Show full text by default, hide short text */
.rotation-text-short {
  display: none;
}

/* At smaller screens, hide full text and show short text */
@media (max-width: 768px) {
  .rotation-text-full {
    display: none;
  }
  .rotation-text-short {
    display: inline;
  }
  .board-container {
    padding-top: 100px;
    padding-bottom: 100px;
  }
}

@media (max-width: 480px) {
  .rotation-text {
    font-size: min(18px, 6vw);
    padding: min(8px, 0.8vh) min(15px, 1.5vw);
    letter-spacing: min(1px, 0.1vw);
  }
}

/* Power-up styles - enhanced visuals */
.power-up-indicator {
  position: absolute;
  right: min(10px, 1vw);
  top: min(10px, 1vh);
  display: flex;
  flex-direction: column;
  gap: min(8px, 0.8vh);
  z-index: 100;
  width: min(200px, 20vw); /* Add max width that scales */
}

.power-up-timer[data-type="freeze"] {
  position: absolute;
  right: 0;
  top: 0;
  --glow-color: #00ffff;
}

.power-up-timer[data-type="multiplier"] {
  position: absolute;
  right: 0;
  top: min(50px, 5vh);
  --glow-color: #ffdd00;
}

.power-up-timer {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: min(8px, 0.8vh);
  background: rgba(13, 13, 23, 0.95);
  padding: min(10px, 1vh) min(15px, 1.5vw);
  border-radius: min(8px, 0.8vh);
  backdrop-filter: blur(10px);
  border: min(2px, 0.2vh) solid var(--glow-color, #00FF9F);
  box-shadow: 
    0 0 min(10px, 1vh) var(--glow-color, #00FF9F),
    inset 0 0 min(15px, 1.5vh) rgba(0, 255, 159, 0.2);
  min-width: min(160px, 16vw);
  font-size: min(14px, 1.4vh);
  font-weight: 600;
  letter-spacing: 0.5px;
  color: #fff;
  text-shadow: 0 0 min(8px, 0.8vh) var(--glow-color, #00FF9F);
  transition: all 0.3s ease;
  animation: powerUpPulse 2s infinite;
}

.power-up-timer::before {
  content: '';
  position: absolute;
  inset: -1px;
  border-radius: 8px;
  padding: 1px;
  background: linear-gradient(
    45deg,
    transparent 40%,
    var(--glow-color, #00FF9F),
    transparent 60%
  );
  -webkit-mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  opacity: 0.5;
  animation: borderGlow 3s linear infinite;
}

@keyframes powerUpPulse {
  0%, 100% {
    transform: scale(1);
    filter: brightness(1);
  }
  50% {
    transform: scale(1.02);
    filter: brightness(1.1);
  }
}

@keyframes borderGlow {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 200% 50%;
  }
}

/* Update responsive styles */
@media (max-width: 768px) {
  .power-up-timer[data-type="multiplier"] {
    top: min(45px, 4.5vh);
  }
  
  .power-up-timer {
    padding: min(8px, 0.8vh) min(12px, 1.2vw);
    min-width: auto;
    font-size: min(12px, 1.2vh);
  }

  /* Hide power-up text description at smaller screens */
  .power-up-timer .power-up-text {
    display: none;
  }

  /* Keep icon and timer value visible */
  .power-up-timer .power-up-icon,
  .power-up-timer .timer-value {
    display: inline-block;
  }
}

.power-up-guide {
  position: absolute;
  top: 10px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 20px;
  background: rgba(0, 255, 159, 0.1);
  padding: 10px 20px;
  border-radius: 8px;
  border: 1px solid rgba(0, 255, 159, 0.3);
}

.power-up-item {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #fff;
  font-size: 14px;
}

.power-up-item span:first-child {
  font-size: 18px;
}

/* Add these styles to your existing Game.css */

.tutorial-message {
  position: fixed;
  z-index: 5;
  padding: 20px;
  background: rgba(26, 26, 46, 0.95);
  border: 2px solid #00FF9F;
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0, 255, 159, 0.3);
  color: white;
  max-width: 300px;
  animation: fadeIn 0.3s ease-out;
}

.tutorial-message.center {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.tutorial-message.right {
  top: 50%;
  right: 20px;
  transform: translateY(-50%);
}

.tutorial-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
}

.tutorial-content p {
  margin: 0;
  text-align: center;
  line-height: 1.4;
}

.tutorial-next-button {
  background: #00FF9F;
  color: #1a1a2e;
  border: none;
  padding: 8px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.2s ease;
}

.tutorial-next-button:hover {
  background: #00CC7F;
  transform: scale(1.05);
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.game-controls {
  position: absolute;
  top: 20px;
  right: 20px;
  z-index: 10;
}

.skip-tutorial-button {
  position: absolute;
  top: 20px;
  right: 20px;
  padding: 10px 20px;
  background: rgba(255, 77, 109, 0.2);
  border: 2px solid #FF4D6D;
  border-radius: 8px;
  color: #FF4D6D;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.2s ease;
  z-index: 100;
}

.skip-tutorial-button:hover {
  background: rgba(255, 77, 109, 0.3);
  transform: scale(1.05);
}

.skip-tutorial-button:active {
  transform: scale(0.95);
}

.game-statistics {
  position: absolute;
  bottom: 20px;
  left: 20px;
  color: #00FF9F;
  font-size: 14px;
}

/* Update exit button positioning */
.exit-button {
  position: fixed;
  top: 1.625rem;  /* Changed from 95px to 20px */
  right: 2vw;
  padding: 8px 16px;
  border: 2px solid #FF4D6D;
  background: rgba(255, 77, 109, 0.1);
  color: #FF4D6D;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 5px;
  z-index: 10;
}

.exit-button:hover {
  background: rgba(255, 77, 109, 0.2);
  transform: scale(1.05);
}

.exit-button::before {
  font-size: 16px;
}

/* Remove board-controls class since we're not using it for the exit button anymore */
.board-controls {
  display: none;  /* Hide the container since we're not using it */
}

.timer-container {
  position: fixed;
  right: 50px;
  top: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

:root {
  --theme-accent: #00FF9F;
  --theme-secondary: #00FFFF;
  --theme-background: #1a1a2e;
}

/* Update the primary button style */
.cyberpunk-button.primary {
  background: linear-gradient(45deg, var(--theme-accent), var(--theme-secondary));
  color: var(--theme-background);
  font-weight: bold;
}

.level-complete__message {
  color: #ffffff;
  font-size: 18px;
  margin: 20px 0;
  line-height: 1.5;
  opacity: 0.9;
}

/* Update French Bulldog positioning to align with level progress and score */
.game-container .french-bulldog {
  position: absolute;
  top: calc(7.3rem + 8rem) !important;  /* Position below score */
  left: 2vw;  /* Match level progress and score left position */
  z-index: 90;
  transform: none !important;
  --bulldog-scale: min(1, calc(0.6 + 0.4 * (100vw / 1920)));
  transform: scale(var(--bulldog-scale)) !important;
}

/* Update bulldog abilities to align with bulldog */
.bulldog-abilities {
  position: absolute;
  left: 2vw;  /* Match level progress and score left position */
  top: calc(7.3rem + 16rem);  /* Position below bulldog */
  display: flex;
  flex-direction: column;
  gap: clamp(4px, 0.8vh, 6px);
  z-index: 10;
  width: min(280px, 25vw);  /* Match level progress and score width */
}

/* Ensure speech bubble doesn't get cut off */
.game-container .speech-bubble {
  z-index: 91;
  font-size: min(16px, 1.8vw);
  padding: min(10px, 1.5vh) min(20px, 2.5vw);
  border-radius: min(8px, 1vh);
  max-width: min(300px, 25vw);
}

/* Add CSS custom properties for each popup type */
.score-popup[data-type='score'] {
  --start-y: 20px;
  --mid-y: -20px;
  --end-y: -40px;
  --final-y: -60px;
}

.score-popup[data-type='quick'] {
  --start-y: 0;
  --mid-y: -30px;
  --end-y: -50px;
  --final-y: -70px;
  --start-rotate: -5deg;
  --mid-rotate: 5deg;
  --end-rotate: -3deg;
}

.score-popup[data-type='combo'] {
  --start-y: 0;
  --start-scale: 0.5;
  --mid-y: -40px;
  --mid-scale: 1.4;
  --end-y: -50px;
  --end-scale: 1.2;
  --final-y: -80px;
  --final-scale: 0.8;
  --final-blur: 2px;
}

.score-popup[data-type='clear'] {
  --start-y: 0;
  --start-scale: 0.8;
  --start-blur: 4px;
  --mid-y: -30px;
  --mid-scale: 1.3;
  --mid-blur: 0px;
  --end-y: -60px;
  --end-scale: 1.1;
  --end-blur: 0px;
  --final-y: -90px;
  --final-scale: 0.9;
  --final-blur: 2px;
}

/* Ensure score and power-ups don't affect each other */
.score, .power-up-timer {
  position: fixed;
  pointer-events: none;
}

@media (max-width: 1200px) {
  .power-up-indicator {
    right: min(120px, 12vw);
  }
  
  .power-up-timer {
    width: min(100px, 10vw);
  }
}

@media (max-width: 768px) {
  .power-up-indicator {
    right: min(100px, 15vw);
  }
  
  .power-up-timer {
    width: min(80px, 8vw);
    font-size: min(12px, 1.4vw);
  }
}

/* Cyberpunk undo button styling */
.undo-button {
  background: rgba(13, 13, 23, 0.95);
  padding: 10px 20px;
  border-radius: 8px;
  backdrop-filter: blur(10px);
  border: 2px solid #FF1177;
  box-shadow: 
    0 0 10px rgba(255, 17, 119, 0.3),
    inset 0 0 15px rgba(255, 17, 119, 0.2);
  color: #fff;
  font-size: 14px;
  font-weight: 600;
  letter-spacing: 1px;
  text-transform: uppercase;
  text-shadow: 0 0 8px #FF1177;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.undo-button::before {
  content: '';
  position: absolute;
  inset: -1px;
  border-radius: 8px;
  padding: 1px;
  background: linear-gradient(
    45deg,
    transparent 40%,
    #FF1177,
    transparent 60%
  );
  -webkit-mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  opacity: 0.5;
  animation: borderGlow 3s linear infinite;
}

.undo-button:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 0 15px rgba(255, 17, 119, 0.4),
    inset 0 0 20px rgba(255, 17, 119, 0.3);
  background: rgba(20, 20, 35, 0.95);
}

.undo-button:active {
  transform: translateY(1px);
}

.undo-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
  border-color: rgba(255, 17, 119, 0.3);
  box-shadow: none;
}

.undo-button:disabled::before {
  opacity: 0.2;
}

/* Base setup for grid animations */
.canvas-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.canvas-wrapper.grid-full {
  position: relative;
  z-index: 1;
}

/* Tile flash animation */
.tile-flash {
  position: absolute;
  width: calc(var(--tile-size, 60px) * 0.866); /* Hexagon width */
  height: var(--tile-size, 60px);
  clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
  background: rgba(0, 255, 159, 0.4);
  pointer-events: none;
  opacity: 0;
}

/* Ring-based animations */
.ring-0 { animation: flashTile 0.4s ease-out 0s; }     /* Center */
.ring-1 { animation: flashTile 0.4s ease-out 0.1s; }   /* First ring */
.ring-2 { animation: flashTile 0.4s ease-out 0.2s; }   /* Second ring */
.ring-3 { animation: flashTile 0.4s ease-out 0.3s; }   /* Outer ring */

/* Hexagonal ripple effect */
.hex-ripple {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: calc(min(120px, 12vw) * 0.866);
  height: min(120px, 12vw);
  background: transparent;
  border: 6px solid var(--theme-accent, rgba(0, 0, 0, 0));
  clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
  opacity: 0;
}

.ripple-1 { animation: hexRipple 1.2s ease-out 0s; }
.ripple-2 { animation: hexRipple 1.2s ease-out 0.2s; }
.ripple-3 { animation: hexRipple 1.2s ease-out 0.4s; }

@keyframes flashTile {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }
  50% {
    opacity: 1;
    transform: scale(1.1);
  }
  100% {
    opacity: 0;
    transform: scale(1);
  }
}

@keyframes hexRipple {
  0% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(2.5);
  }
}

.level-complete__button--danger {
  background: rgba(255, 17, 119, 0.1);
  border-color: #FF1177;
  color: #FF1177;
  box-shadow: 
    0 0 10px rgba(255, 17, 119, 0.2),
    inset 0 0 15px rgba(255, 17, 119, 0.1);
  text-shadow: 0 0 8px #FF1177;
}

.level-complete__button--danger:hover {
  background: rgba(255, 17, 119, 0.2);
  border-color: #FF1177;
  box-shadow: 
    0 0 15px rgba(255, 17, 119, 0.3),
    inset 0 0 20px rgba(255, 17, 119, 0.2);
}

/* Media query for next tiles positioning */
@media (max-width: 768px) {
  .board-container {
    gap: 20px;
    justify-content: flex-start; /* Align board to top */
    padding-bottom: 100px; /* Make room for next tiles */
  }


  .next-tiles {
    flex-direction: row;
    justify-content: center;
    gap: min(10px, 2vw);
  }

  .next-tile {
    width: clamp(45px, 15vw, 70px); /* Adjust size */
    height: clamp(45px, 15vw, 70px);
  }

  .next-tile.selected {
    transform: scale(1.1);
  }

  .next-tile:hover {
    transform: scale(1.05);
  }
}

/* Additional adjustments for very small screens */
@media (max-width: 412px) {
  .board-container {
    padding-bottom: 80px; /* Slightly less padding */
  }

  .next-tiles-container {
    bottom: 10px;
  }

  .next-tile {
    width: clamp(40px, 12vw, 60px);
    height: clamp(40px, 12vw, 60px);
  }
}

/* Score positioning - calculate position based on level progress height */
.score {
  position: fixed;
  left: 2vw;
  top: calc(0.625rem + 60px + 0.5rem); /* level progress top + height + gap */
  min-width: min(280px, 25vw);
  padding: min(12px, 1.5vh) min(20px, 2vw);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: min(6px, 0.8vh);
  overflow: visible;
  transition: all 0.3s ease;
  z-index: 100;
  transform-origin: left top;
  transform: scale(var(--ui-scale, 1));
}

.score::before {
  content: attr(data-label);
  font-size: 0.7em;
  text-transform: uppercase;
  letter-spacing: 2px;
  color: rgba(255, 255, 255, 0.7);
  margin-bottom: 2px;
}

.score-value {
  font-size: min(1.4em, 4vw);
  font-weight: bold;
  color: var(--hex-color);
  text-shadow: 
    0 0 10px rgba(var(--hex-color), 0.5),
    0 0 20px rgba(var(--hex-color), 0.3);
  letter-spacing: 0.5px;
}

/* Next tiles container - default positioning (right side) */
.next-tiles-container {
  position: absolute;
  width: clamp(80px, 12vw, 120px);
  right: max(20px, 3vw);
  top: 50%;
  transform: translateY(-50%);
  display: flex;
  flex-direction: column;
  gap: clamp(8px, 1.2vh, 15px);
  align-items: center;
  pointer-events: all;
  z-index: 100;
  padding: clamp(10px, 2vh, 20px);
  transition: all 0.3s ease;
}

.next-tiles {
  display: flex;
  flex-direction: column;
  gap: min(15px, 2vw);
  justify-content: center;
  align-items: center;
  width: 100%;
}

.next-tile {
  width: min(80px, 15vw);
  height: min(80px, 15vw);
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  cursor: pointer;
  border-radius: 50%;
  background: var(--background-dark);
  border: 2px solid rgba(var(--hex-color), 0.2);
  box-shadow: 
    0 0 10px rgba(var(--hex-color), 0.1),
    0 0 20px rgba(0, 0, 0, 0.2);
  transform: scale(var(--scale, 1));
  --scale: 1;
}

.next-tile:hover {
  --scale: 1.05;
  background: rgba(13, 13, 26, 0.7);
  border-color: rgba(var(--hex-color), 0.4);
  box-shadow: 
    0 0 15px rgba(var(--hex-color), 0.15),
    0 0 25px rgba(0, 0, 0, 0.25);
}

.next-tile.selected {
  --scale: 1.1;
  background: rgba(13, 13, 26, 0.8);
  border-color: rgba(var(--hex-color), 0.5);
  box-shadow: 
    0 0 20px rgba(var(--hex-color), 0.2),
    0 0 30px rgba(0, 0, 0, 0.3);
}

.next-tile canvas {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  pointer-events: none;
  transform: scale(var(--scale));
  box-shadow: 0 0 clamp(8px, 1.5vw, 15px) rgba(0, 255, 159, 0.2);
  pointer-events: none;
  transition: transform 0.2s ease;
}

/* Mobile layout */
@media (max-width: 768px) {
  .next-tiles-container {
    position: fixed;
    height: fit-content;
    top: 75%;
    left: 50%;
    transform: translateX(-50%);
    width: min(90vw, 400px);
    flex-direction: row;
    justify-content: center;
    padding: 8px;
    gap: 10px;
  }

  .next-tiles {
    flex-direction: row;
    gap: 10px;
    margin: 0;
  }
}

/* Smaller device optimizations */
@media (max-width: 480px) {
  .next-tiles-container {
    padding: 5px;
  }

  .next-tile {
    width: clamp(35px, 11vw, 50px);
    height: clamp(35px, 11vw, 50px);
  }
}
